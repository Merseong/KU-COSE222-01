안녕하세요 2018320205 신대성입니다. 이번 세번째 마일스톤에서는 다섯개의 인스트럭션을 구현했습니다.
주어진 c코드를 컴파일한 테스트벡 덤프파일과 밉스의 컨트롤러 안의 모듈들을 대조해 알아냈습니다.

첫번째로 구현한 것은 nop입니다. 구현하지 않아도 정상적으로 작동하지만, 만일을 위해 에이엘유덱에서 OR로 작동하게 만들었습니다.

두번째는 jal입니다. 우선 메인덱에 jal 케이스를 추가하고, 먹스포를 만들어 wrmux와 srcbmux에서 각각 31번의 주소와 pcplus4를 가져오게 만들어,
결과적으로 31번 레지스터에 pcplus4를 저장하게 만들었습니다. 또 이를 결정해주기 위해 regdst와 alusrc를 2비트로 늘렸습니다.

세번째는 jr입니다. R타입이므로 aludec에 케이스를 추가하고, jump를 aludec에서도 컨트롤 가능하도록 연결해줬습니다. 
그리고 pcmux를 먹스포로 만들어 alu에서 나온 31번 레지스터의 값을 선택하게 만들어줬습니다.

네번째는 sltu입니다. 이경우는 alu에 이미 sltu를 계산한 값이 있어서, alucontrol을 늘려 이를 출력할 수 있게 만들어줬습니다.

마지막은 bne입니다. 브랜치의 길이를 2로 늘리고, 만일 bne면 낫 제로와 비교해 트루면 브랜치하도록 만들었습니다.

다음은 두번째 파일의 시뮬레이션입니다. pc가 jal이 있는 24일때 레지스터 31번에 28이 저장되고, jr이 있는 e0일때 다음 pc가 28이됩니다.
또, bne가 있어 계속 38로 돌아오는 것을 볼수 있습니다.

첫번째 파일의 시뮬레이션으로 넘어가 실행해도, 잘 실행되는 것을 볼 수 있습니다.

지금까지 2018320205 신대성이었습니다. 감사합니다. 