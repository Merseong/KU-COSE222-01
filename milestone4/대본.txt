안녕하세요 2018320205 신대성입니다.

저는 밉스 파이프라인을 구현하기 위해 우선 데이터패쓰 안에 5개의 플립플롭을 만들었습니다.
222번줄부터 276번줄까지는 각각의 컨트롤 와이어들이 나와있고, 291번줄부터는 플립플롭에서
묶어서 넣고 묶인채로 내보내는 것을 확인할 수 있습니다.

그 다음으로 메인덱의 아웃풋을 조정했습니다.
기존에는 각 동작마다 아웃풋을 넣어줬던 것을 어느 파이프라인 과정에서 쓸지에 따라 묶어서 내보내도록 만들고,
이에 따라 컨트롤러와 데이터패쓰 인풋도 조정해줬습니다.
다음 108번 줄부터 136번 줄까지에서 컨트롤들이 묶인 것을 확인할 수 있습니다.
그리고 이를 위의 플립플롭에 같이 묶어서 넘기도록 구현했습니다.
이후 각 파이프라인 과정에 맞게 아래의 기존 모듈들의 인풋과 아웃풋을 수정했습니다.

그 다음인 포워딩은 맨 아래에 새로운 모듈을 만들어서 구현했습니다.
앞의 인스트럭션에서 데이터를 넣을 레지스터와 그 다음에 가져와야 하는 레지스터가 동일할 경우
포워딩 컨트롤을 바꿔 위의 먹스에서 포워딩을 진행하도록 만들었습니다.
또, 포워딩중 레지스터의 쓰기 타이밍을 맞추기 위해 레그파일에서 클락을 네거티브 엣지로 바꿨습니다.

그 다음은 스톨의 구현입니다. 우선 stall control이라는 와이어를 만들고,
스톨이 필요하면 스톨 컨트롤을 이용해 pc나 플립플롭 등을 일시로 정지시켰습니다.

다음은 모델심에서 시뮬레이트를 돌린 결과입니다.
우선 클락의 포지티브 엣지마다 작업이 수행되고 있는 것을 확인 할 수 있습니다.
그리고 위쪽의 레지스터에서, 2번에는 GPIO의 베이스 주소인 ffff2000이 들어가있고,
각 세그멘트를 쓰기 전마다 3번에 세그멘트 주소가 바뀌고 있는 것을 확인할 수 있습니다.
그리고 10번에는 세그멘트에 들어갈 7비트의 수가 확인됩니다.
그래서 위의 세그먼트에는 실제로 8 7 6 5 4 3 2 1이 잘 들어간 것을 확인할 수 있습니다.

지금까지 2018320205 신대성이었습니다. 감사합니다.