
testvec:     file format elf32-bigmips
testvec
architecture: mips:3000, flags 0x00000012:
EXEC_P, HAS_SYMS
start address 0x00000000

Program Header:
    LOAD off    0x00000060 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000800 memsz 0x00000800 flags rwx
private flags = 1: [no abi set] [mips1] [not 32bitmode] [noreorder]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b0  00000000  00000000  00000060  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         00000400  00000400  00000400  00000460  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  2 .reginfo      00000018  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY, LINK_ONCE_SAME_SIZE
  3 .pdr          00000060  00000000  00000000  00000878  2**2
                  CONTENTS, READONLY
  4 .debug_abbrev 00000096  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000019b  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000071  00000000  00000000  00000b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  00000b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000081  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000038  00000000  00000000  00000c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000020  00000000  00000000  00000c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000012  00000000  00000000  00000cb9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00000400 l    d  .data	00000000 .data
00000000 l    d  .reginfo	00000000 .reginfo
00000000 l    d  .pdr	00000000 .pdr
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .comment	00000000 .comment
00000400 l       .data	00000000 stack
00000000 l    df *ABS*	00000000 Count.c
0000010c g     F .text	000001a4 display
00000010 g     F .text	000000ac Count
000000bc g     F .text	00000050 my_addition



Disassembly of section .text:

00000000 <Count-0x10>:
   0:	3c1d0000 	lui	sp,0x0
   4:	27bd0400 	addiu	sp,sp,1024
   8:	08000004 	j	10 <Count>
   c:	00000000 	nop

00000010 <Count>:

void display (int);
int  my_addition (int *, int *);

int Count()
{
  10:	27bdffd8 	addiu	sp,sp,-40
  14:	afbf0024 	sw	ra,36(sp)
  18:	afbe0020 	sw	s8,32(sp)
  1c:	03a0f021 	move	s8,sp
	unsigned int i;
	int in1, in2, out;

	in1 = 5;
  20:	24020005 	li	v0,5
  24:	afc20018 	sw	v0,24(s8)

	while (1){

		for (in2 = -5; in2 < 5 ; in2++) {
  28:	2402fffb 	li	v0,-5
  2c:	afc2001c 	sw	v0,28(s8)
  30:	08000028 	j	a0 <Count+0x90>
  34:	00000000 	nop

			out = my_addition (&in1, &in2);
  38:	27c20018 	addiu	v0,s8,24
  3c:	27c3001c 	addiu	v1,s8,28
  40:	00402021 	move	a0,v0
  44:	00602821 	move	a1,v1
  48:	0c00002f 	jal	bc <my_addition>
  4c:	00000000 	nop
  50:	afc20010 	sw	v0,16(s8)

			display(out);                 // Display a number on HEX0
  54:	8fc40010 	lw	a0,16(s8)
  58:	0c000043 	jal	10c <display>
  5c:	00000000 	nop

			for (i=0; i<0x50000; i++) ;  // delay for roughly 0.5 second
  60:	afc00014 	sw	zero,20(s8)
  64:	0800001f 	j	7c <Count+0x6c>
  68:	00000000 	nop
  6c:	8fc20014 	lw	v0,20(s8)
  70:	00000000 	nop
  74:	24420001 	addiu	v0,v0,1
  78:	afc20014 	sw	v0,20(s8)
  7c:	8fc20014 	lw	v0,20(s8)
  80:	3c030005 	lui	v1,0x5
  84:	0043102b 	sltu	v0,v0,v1
  88:	1440fff8 	bnez	v0,6c <Count+0x5c>
  8c:	00000000 	nop

	in1 = 5;

	while (1){

		for (in2 = -5; in2 < 5 ; in2++) {
  90:	8fc2001c 	lw	v0,28(s8)
  94:	00000000 	nop
  98:	24420001 	addiu	v0,v0,1
  9c:	afc2001c 	sw	v0,28(s8)
  a0:	8fc2001c 	lw	v0,28(s8)
  a4:	00000000 	nop
  a8:	28420005 	slti	v0,v0,5
  ac:	1440ffe2 	bnez	v0,38 <Count+0x28>
  b0:	00000000 	nop
			display(out);                 // Display a number on HEX0

			for (i=0; i<0x50000; i++) ;  // delay for roughly 0.5 second

		}
	}
  b4:	0800000a 	j	28 <Count+0x18>
  b8:	00000000 	nop

000000bc <my_addition>:
	return 0;
}


int my_addition (int * a, int * b)
{
  bc:	27bdfff0 	addiu	sp,sp,-16
  c0:	afbe0008 	sw	s8,8(sp)
  c4:	03a0f021 	move	s8,sp
  c8:	afc40010 	sw	a0,16(s8)
  cc:	afc50014 	sw	a1,20(s8)
	int sum;

	sum = *a + *b;
  d0:	8fc20010 	lw	v0,16(s8)
  d4:	00000000 	nop
  d8:	8c430000 	lw	v1,0(v0)
  dc:	8fc20014 	lw	v0,20(s8)
  e0:	00000000 	nop
  e4:	8c420000 	lw	v0,0(v0)
  e8:	00000000 	nop
  ec:	00621021 	addu	v0,v1,v0
  f0:	afc20000 	sw	v0,0(s8)

	return sum;
  f4:	8fc20000 	lw	v0,0(s8)
}
  f8:	03c0e821 	move	sp,s8
  fc:	8fbe0008 	lw	s8,8(sp)
 100:	27bd0010 	addiu	sp,sp,16
 104:	03e00008 	jr	ra
 108:	00000000 	nop

0000010c <display>:


void display (int num)
{
 10c:	27bdfff0 	addiu	sp,sp,-16
 110:	afbe0008 	sw	s8,8(sp)
 114:	03a0f021 	move	s8,sp
 118:	afc40010 	sw	a0,16(s8)
	unsigned int * seg0_addr = (unsigned int *) SevenSeg0;
 11c:	3c02ffff 	lui	v0,0xffff
 120:	3442200c 	ori	v0,v0,0x200c
 124:	afc20000 	sw	v0,0(s8)

	if      (num == 0) *seg0_addr = SEG_0;
 128:	8fc20010 	lw	v0,16(s8)
 12c:	00000000 	nop
 130:	14400006 	bnez	v0,14c <display+0x40>
 134:	00000000 	nop
 138:	8fc30000 	lw	v1,0(s8)
 13c:	24020040 	li	v0,64
 140:	ac620000 	sw	v0,0(v1)
 144:	080000a7 	j	29c <display+0x190>
 148:	00000000 	nop
	else if (num == 1) *seg0_addr = SEG_1;
 14c:	8fc30010 	lw	v1,16(s8)
 150:	24020001 	li	v0,1
 154:	14620006 	bne	v1,v0,170 <display+0x64>
 158:	00000000 	nop
 15c:	8fc30000 	lw	v1,0(s8)
 160:	24020079 	li	v0,121
 164:	ac620000 	sw	v0,0(v1)
 168:	080000a7 	j	29c <display+0x190>
 16c:	00000000 	nop
	else if (num == 2) *seg0_addr = SEG_2;
 170:	8fc30010 	lw	v1,16(s8)
 174:	24020002 	li	v0,2
 178:	14620006 	bne	v1,v0,194 <display+0x88>
 17c:	00000000 	nop
 180:	8fc30000 	lw	v1,0(s8)
 184:	24020024 	li	v0,36
 188:	ac620000 	sw	v0,0(v1)
 18c:	080000a7 	j	29c <display+0x190>
 190:	00000000 	nop
	else if (num == 3) *seg0_addr = SEG_3;
 194:	8fc30010 	lw	v1,16(s8)
 198:	24020003 	li	v0,3
 19c:	14620006 	bne	v1,v0,1b8 <display+0xac>
 1a0:	00000000 	nop
 1a4:	8fc30000 	lw	v1,0(s8)
 1a8:	24020030 	li	v0,48
 1ac:	ac620000 	sw	v0,0(v1)
 1b0:	080000a7 	j	29c <display+0x190>
 1b4:	00000000 	nop
	else if (num == 4) *seg0_addr = SEG_4;
 1b8:	8fc30010 	lw	v1,16(s8)
 1bc:	24020004 	li	v0,4
 1c0:	14620006 	bne	v1,v0,1dc <display+0xd0>
 1c4:	00000000 	nop
 1c8:	8fc30000 	lw	v1,0(s8)
 1cc:	24020019 	li	v0,25
 1d0:	ac620000 	sw	v0,0(v1)
 1d4:	080000a7 	j	29c <display+0x190>
 1d8:	00000000 	nop
	else if (num == 5) *seg0_addr = SEG_5;
 1dc:	8fc30010 	lw	v1,16(s8)
 1e0:	24020005 	li	v0,5
 1e4:	14620006 	bne	v1,v0,200 <display+0xf4>
 1e8:	00000000 	nop
 1ec:	8fc30000 	lw	v1,0(s8)
 1f0:	24020012 	li	v0,18
 1f4:	ac620000 	sw	v0,0(v1)
 1f8:	080000a7 	j	29c <display+0x190>
 1fc:	00000000 	nop
	else if (num == 6) *seg0_addr = SEG_6;
 200:	8fc30010 	lw	v1,16(s8)
 204:	24020006 	li	v0,6
 208:	14620006 	bne	v1,v0,224 <display+0x118>
 20c:	00000000 	nop
 210:	8fc30000 	lw	v1,0(s8)
 214:	24020002 	li	v0,2
 218:	ac620000 	sw	v0,0(v1)
 21c:	080000a7 	j	29c <display+0x190>
 220:	00000000 	nop
	else if (num == 7) *seg0_addr = SEG_7;
 224:	8fc30010 	lw	v1,16(s8)
 228:	24020007 	li	v0,7
 22c:	14620006 	bne	v1,v0,248 <display+0x13c>
 230:	00000000 	nop
 234:	8fc30000 	lw	v1,0(s8)
 238:	24020078 	li	v0,120
 23c:	ac620000 	sw	v0,0(v1)
 240:	080000a7 	j	29c <display+0x190>
 244:	00000000 	nop
	else if (num == 8) *seg0_addr = SEG_8;
 248:	8fc30010 	lw	v1,16(s8)
 24c:	24020008 	li	v0,8
 250:	14620006 	bne	v1,v0,26c <display+0x160>
 254:	00000000 	nop
 258:	8fc20000 	lw	v0,0(s8)
 25c:	00000000 	nop
 260:	ac400000 	sw	zero,0(v0)
 264:	080000a7 	j	29c <display+0x190>
 268:	00000000 	nop
	else if (num == 9) *seg0_addr = SEG_9;
 26c:	8fc30010 	lw	v1,16(s8)
 270:	24020009 	li	v0,9
 274:	14620006 	bne	v1,v0,290 <display+0x184>
 278:	00000000 	nop
 27c:	8fc30000 	lw	v1,0(s8)
 280:	24020010 	li	v0,16
 284:	ac620000 	sw	v0,0(v1)
 288:	080000a7 	j	29c <display+0x190>
 28c:	00000000 	nop
	else               *seg0_addr = SEG_;
 290:	8fc30000 	lw	v1,0(s8)
 294:	2402003f 	li	v0,63
 298:	ac620000 	sw	v0,0(v1)
			break;
	default: *seg0_addr = SEG_;
			break;
	}
*/
}
 29c:	03c0e821 	move	sp,s8
 2a0:	8fbe0008 	lw	s8,8(sp)
 2a4:	27bd0010 	addiu	sp,sp,16
 2a8:	03e00008 	jr	ra
 2ac:	00000000 	nop
